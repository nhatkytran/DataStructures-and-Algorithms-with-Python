+++ Linked List +++

>>> Linked List Circle --> linkedListCircle.ipynb

--> Given head, the head of a linked list, determine \
if the linked list has a cycle in it.
--> There is a cycle in a linked list \
if there is some node in the list that can be reached again \
by continuously following the next pointer. \
--> Internally, pos is used to denote the index of the node that \
tail's next pointer is connected to. \
Note that pos is not passed as a parameter.
--> Return true if there is a cycle in the linked list. \
Otherwise, return false.
---
Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, \
where the tail connects to the 1st node (0-indexed).
---
Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, \
where the tail connects to the 0th node.
---
Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.

>>> Find The Duplicate Number --> findTheDuplicateNumber.ipynb

>>> Reverse Linked List --> reverseLinkedList.ipynb
---
Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]
---
Input: head = [1,2]
Output: [2,1]
---
Input: head = []
Output: []

>>> Merge Two Sorted Lists --> mergeTwoSortedLists.ipynb
---
Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]
---
Input: list1 = [], list2 = []
Output: []
---
Input: list1 = [], list2 = [0]
Output: [0]

>>> Palindrome Linked List --> palindromeLinkedList.ipynb
---
Input: head = [1,2,2,1]
Output: true
---
Input: head = [1,2]
Output: false

>>> Remove Linked List Elements --> removeLinkedListElements.ipynb
---
Input: head = [1,2,6,3,4,5,6], val = 6
Output: [1,2,3,4,5]
---
Input: head = [], val = 1
Output: []
---
Input: head = [7,7,7,7], val = 7
Output: []

>>> Remove Duplicates from Sorted List --> removeDuplicatesSortedList.ipynb
---
Input: head = [1,1,2]
Output: [1,2]
---
Input: head = [1,1,2,3,3]
Output: [1,2,3]
