+++ Arrays & Hashing +++

>>> Contains Duplicate --> containsDuplicate.ipynb

--> Given an integer array nums, return true if any value appears \
at least twice in the array, and return false if every element is distinct.
--> nums = [1,2,3,1] --> True
--> nums = [1,2,3,4] --> False
--> nums = [1,1,1,3,3,4,3,2,4,2] --> True

>>> Valid Anagram --> validAnagram.ipynb
--> Given two strings s and t, return true if t is an anagram of s, and false otherwise.
--> An Anagram is a word or phrase formed by rearranging \
the letters of a different word or phrase, typically using
all the original letters exactly once.
--> Input: s = "anagram", t = "nagaram"
--> Output: true

>>> Replace Elements with Greatest Element on Right Side --> replaceGreatestRightSide.ipynb
--> Given an array "arr", replace every element in that array \
with the greatest element among the elements to its right, and replace the last element with -1.
--> After doing so, return the array.
---
Input: arr = [17,18,5,4,6,1]
Output: [18,6,6,6,1,-1]
Explanation: 
- index 0 --> the greatest element to the right of index 0 is index 1 (18).
- index 1 --> the greatest element to the right of index 1 is index 4 (6).
- index 2 --> the greatest element to the right of index 2 is index 4 (6).
- index 3 --> the greatest element to the right of index 3 is index 4 (6).
- index 4 --> the greatest element to the right of index 4 is index 5 (1).
- index 5 --> there are no elements to the right of index 5, so we put -1.
---
Input: arr = [400]
Output: [-1]
Explanation: There are no elements to the right of index 0.
*** Tip: Backward --> O(n)

>>> Is Subsequence --> isSubsequence.ipynb
--> Given two strings s and t, return true if s is a subsequence of t, or false otherwise.
--> A subsequence of a string is a new string that is formed from the original string \
by deleting some (can be none) of the characters without disturbing the relative positions \
of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).
---
Input: s = "abc", t = "ahbgdc"
Output: true
---
Input: s = "axc", t = "ahbgdc"
Output: false

>>> Length of Last Word --> lengthLastWord.ipynb
--> Given a string s consisting of words and spaces, return the length of the last word in the string.
--> A word is a maximal substring consisting of non-space characters only.
---
Input: s = "Hello World"
Output: 5
Explanation: The last word is "World" with length 5.
---
Input: s = "   fly me   to   the moon  "
Output: 4
Explanation: The last word is "moon" with length 4.
---
Input: s = "luffy is still joyboy"
Output: 6
Explanation: The last word is "joyboy" with length 6.

>>> Two Sum --> twoSum.ipynb
--> Given an array of integers nums and an integer target, \
return indices of the two numbers such that they add up to target.
--> You may assume that each input would have exactly one solution, \
and you may not use the same element twice.
--> You can return the answer in any order.
---
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
---
Input: nums = [3,2,4], target = 6
Output: [1,2]
---
Input: nums = [3,3], target = 6
Output: [0,1]

>>> Longest Common Prefix --> longestCommonPrefix.ipynb
Write a function to find the longest common prefix string amongst an array of strings.
If there is no common prefix, return an empty string "".
---
Input: strs = ["flower","flow","flight"]
Output: "fl"
---
Input: strs = ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.

>>> Pascal's Triangle --> pascalTriangle.ipynb
Given an integer numRows, return the first numRows of Pascal's triangle.
In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:
          1
        1   1
      1   2   1
    1   3   3   1
  1   4   6   4   1
---
Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
---
Input: numRows = 1
Output: [[1]]

>>> Remove Element --> removeElement.ipynb
---
Input: nums = [3,2,2,3], val = 3
Output: 2, nums = [2,2,_,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 2.
It does not matter what you leave beyond the returned k (hence they are underscores).
---
Input: nums = [0,1,2,2,3,0,4,2], val = 2
Output: 5, nums = [0,1,4,0,3,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.
Note that the five elements can be returned in any order.
It does not matter what you leave beyond the returned k (hence they are underscores).

>>> Unique Email Addresses --> uniqueEmailAddresses.ipynb --> https://leetcode.com/problems/unique-email-addresses/
---
Input: emails = ["test.email+alex@leetcode.com","test.e.mail+bob.cathy@leetcode.com","testemail+david@lee.tcode.com"]
Output: 2
Explanation: "testemail@leetcode.com" and "testemail@lee.tcode.com" actually receive mails.
---
Input: emails = ["a@leetcode.com","b@leetcode.com","c@leetcode.com"]
Output: 3

>>> Concatenation of Array --> concatenationOfArray.ipynb
---
Input: nums = [1,2,1]
Output: [1,2,1,1,2,1]
Explanation: The array ans is formed as follows:
- ans = [nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]
- ans = [1,2,1,1,2,1]
---
Input: nums = [1,3,2,1]
Output: [1,3,2,1,1,3,2,1]
Explanation: The array ans is formed as follows:
- ans = [nums[0],nums[1],nums[2],nums[3],nums[0],nums[1],nums[2],nums[3]]
- ans = [1,3,2,1,1,3,2,1]

>>> Isomorphic Strings -->  isomorphicStrings.ipynb
---
Input: s = "egg", t = "add"
Output: true
---
Input: s = "foo", t = "bar"
Output: false
---
Input: s = "paper", t = "title"
Output: true

>>> Can Place Flowers --> canPlaceFlowers.ipynb
---
Input: flowerbed = [1,0,0,0,1], n = 1
Output: true
---
Input: flowerbed = [1,0,0,0,1], n = 2
Output: false

>>> Majority Element --> majorityElement.ipynb
---
Input: nums = [3,2,3]
Output: 3
---
Input: nums = [2,2,1,1,1,2,2]
Output: 2

>>> Next Greater Element I --> nextGreaterElementI.ipynb
---
Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
Output: [-1,3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.
- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
---
Input: nums1 = [2,4], nums2 = [1,2,3,4]
Output: [3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.
- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.

>>> Find Pivot Index --> findPivotIndex.ipynb
---
Input: nums = [1,7,3,6,5,6]
Output: 3
Explanation:
The pivot index is 3.
Left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11
Right sum = nums[4] + nums[5] = 5 + 6 = 11
---
Input: nums = [1,2,3]
Output: -1
Explanation:
There is no index that satisfies the conditions in the problem statement.
---
Input: nums = [2,1,-1]
Output: 0
Explanation:
The pivot index is 0.
Left sum = 0 (no elements to the left of index 0)
Right sum = nums[1] + nums[2] = 1 + -1 = 0

>>> Range Sum Query - Immutable --> rangeSumQueryImmutable.ipynb
---
Input
["NumArray", "sumRange", "sumRange", "sumRange"]
[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]
Output
[null, 1, -1, -3]
Explanation
NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);
numArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1
numArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1
numArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3
