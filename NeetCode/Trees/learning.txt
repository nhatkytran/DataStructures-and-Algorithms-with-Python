>>> Binary Tree Inorder Traversal --> binaryTreeInorderTraversal.ipynb
---
Input: root = [1,null,2,3]
Output: [1,3,2]
---
Input: root = []
Output: []
---
Input: root = [1]
Output: [1]

>>> Binary Tree Preorder Traversal --> binaryTreePreorderTraversal.ipynb
---
Input: root = [1,null,2,3]
Output: [1,2,3]
---
Input: root = []
Output: []
---
Input: root = [1]
Output: [1]

>>> Binary Tree Postorder Traversal --> binaryTreePostorderTraversal.ipynb
---
Input: root = [1,null,2,3]
Output: [3,2,1]
---
Input: root = []
Output: []
---
Input: root = [1]
Output: [1]

>>> Invert Binary Tree --> invertBinaryTree.ipynb
---
Input: root = [4,2,7,1,3,6,9]
Output: [4,7,2,9,6,3,1]
---
Input: root = [2,1,3]
Output: [2,3,1]
---
Input: root = []
Output: []

>>> Maximum Depth of Binary Tree --> maximumDepthBinaryTree.ipynb
---
Input: root = [3,9,20,null,null,15,7]
Output: 3
---
Input: root = [1,null,2]
Output: 2

>>> Diameter of Binary Tree --> diameterBinaryTree.ipynb
---
Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].
---
Input: root = [1,2]
Output: 1

>>> Balanced Binary Tree --> balancedBinaryTree.ipynb
---
Input: root = [3,9,20,null,null,15,7]
Output: true
---
Input: root = [1,2,2,3,3,null,null,4,4]
Output: false
---
Input: root = []
Output: true
