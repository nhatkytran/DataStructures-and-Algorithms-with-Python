>>> Binary Tree Inorder Traversal --> binaryTreeInorderTraversal.ipynb
---
Input: root = [1,null,2,3]
Output: [1,3,2]
---
Input: root = []
Output: []
---
Input: root = [1]
Output: [1]

>>> Binary Tree Preorder Traversal --> binaryTreePreorderTraversal.ipynb
---
Input: root = [1,null,2,3]
Output: [1,2,3]
---
Input: root = []
Output: []
---
Input: root = [1]
Output: [1]

>>> Binary Tree Postorder Traversal --> binaryTreePostorderTraversal.ipynb
---
Input: root = [1,null,2,3]
Output: [3,2,1]
---
Input: root = []
Output: []
---
Input: root = [1]
Output: [1]

>>> Invert Binary Tree --> invertBinaryTree.ipynb
---
Input: root = [4,2,7,1,3,6,9]
Output: [4,7,2,9,6,3,1]
---
Input: root = [2,1,3]
Output: [2,3,1]
---
Input: root = []
Output: []

>>> Maximum Depth of Binary Tree --> maximumDepthBinaryTree.ipynb
---
Input: root = [3,9,20,null,null,15,7]
Output: 3
---
Input: root = [1,null,2]
Output: 2

>>> Diameter of Binary Tree --> diameterBinaryTree.ipynb
---
Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].
---
Input: root = [1,2]
Output: 1

>>> Balanced Binary Tree --> balancedBinaryTree.ipynb
---
Input: root = [3,9,20,null,null,15,7]
Output: true
---
Input: root = [1,2,2,3,3,null,null,4,4]
Output: false
---
Input: root = []
Output: true

>>> Same Tree --> sameTree.ipynb
---
Input: p = [1,2,3], q = [1,2,3]
Output: true
---
Input: p = [1,2], q = [1,null,2]
Output: false
---
Input: p = [1,2,1], q = [1,1,2]
Output: false

>>> Subtree of Another Tree --> subtreeAnotherTree.ipynb
---
Input: root = [3,4,5,1,2], subRoot = [4,1,2]
Output: true
---
Input: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]
Output: false

>>> Convert Sorted Array to Binary Search Tree --> sortedArrayToBinarySearchTree.ipynb
---
Input: nums = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
---
Input: nums = [1,3]
Output: [3,1]

>>> Merge Two Binary Trees -->  mergeTwoBinaryTrees.ipynb
---
Input: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]
Output: [3,4,5,5,4,null,7]
---
Input: root1 = [1], root2 = [1,2]
Output: [2,2]

>>> Path Sum --> pathSum.ipynb
---
Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22
Output: true
Explanation: The root-to-leaf path with the target sum is shown.
---
Input: root = [1,2,3], targetSum = 5
Output: false
Explanation: There two root-to-leaf paths in the tree:
(1 --> 2): The sum is 3.
(1 --> 3): The sum is 4.
There is no root-to-leaf path with sum = 5.
---
Input: root = [], targetSum = 0
Output: false
Explanation: Since the tree is empty, there are no root-to-leaf paths.
