>>> Binary Search --> binarySearch.ipynb
---
Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in nums and its index is 4
---
Input: nums = [-1,0,3,5,9,12], target = 2
Output: -1
Explanation: 2 does not exist in nums so return -1

>>> Search Insert Position --> searchInsertPosition.ipynb
---
Input: nums = [1,3,5,6], target = 5
Output: 2
---
Input: nums = [1,3,5,6], target = 2
Output: 1
---
Input: nums = [1,3,5,6], target = 7
Output: 4

>>> Guess Number Higher or Lower --> guessNumberHigherLower.ipynb
---
Input: n = 10, pick = 6
Output: 6
---
Input: n = 1, pick = 1
Output: 1
---
Input: n = 2, pick = 1
Output: 1

>>> Arranging Coins --> arrangingCoins.ipynb
---
Input: n = 5
Output: 2
Explanation: Because the 3rd row is incomplete, we return 2.
---
Input: n = 8
Output: 3
Explanation: Because the 4th row is incomplete, we return 3.

>>> Squares of a Sorted Array --> squaresOfSortedArray.ipynb
---
Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].
---
Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]

>>> Valid Perfect Square --> validPerfectSquare.ipynb
---
Input: num = 16
Output: true
Explanation: We return true because 4 * 4 = 16 and 4 is an integer.
---
Input: num = 14
Output: false
Explanation: We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer.
