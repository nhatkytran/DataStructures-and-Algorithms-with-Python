https://www.youtube.com/watch?v=dSo3UvH5v-A&list=PL5DyztRVgtRUVORP3AXvX91uovcaZv0q9&index=2

1. How to check if ith bit is set or not
2. How to set the ith bit
3. Left and Right Shift
4. Counting number of set bits in a number using Right Shift
5. XOR and its properties

*** Bit left and right shift

Left shifting: n = n << i --> n = n * (2 ** i)
Right shifting: n = n >> i --> n = n / (2 ** i)

*** Checking for ith set bit

& 1 --> 1 --> 00000001
& --> 1 & 1 --> 1

*** Number of set bits in N

1. Solution using right shift
2. Solution using n & (n - 1)

LeetCode - Bit Manipulation - Number of 1 Bits
LeetCode - Bit Manipulation - Counting Bits

*** Power of Two

1. Only store 1 set bit
2. n & (n - 1) is 0

LeetCode - Bit Manipulation - Power of Two

*** Bitwise XOR Operation

1 ^ 0 --> 1
1 ^ 1 --> 0
0 ^ 0 --> 0

---

A ^ 0 --> A
A ^ A --> 0

Ordering of XOR doesn't matter

1310. XOR Queries of a Subarray

prefix[i] = arr[0] ^ arr[1] ^ ... ^ arr[i]
---
prefix[R] ^ prex[L - 1] if L > 0
prefix[R]                  L = 0
---
prefix = [arr[0]]
for i in range(1, len(arr)):
    prefix.append(prefix[-1] ^ arr[i])
print(prefix)
result = []
for left, right in queries:
    if left > 0:
        result.append(prefix[right] ^ prefix[left - 1])
    else:
        result.append(prefix[right])
return result

*** Pair Sum XOR of an Array

*** Total sum of all pair XOR

https://www.youtube.com/results?search_query=bit+manipulation%5C

>>> Minimum Flips to Make a OR b Equal to c --> MinimumFlipsToMakeAORBEqualToC.ipynb
---
Input: a = 2, b = 6, c = 5
Output: 3
Explanation: After flips a = 1 , b = 4 , c = 5 such that (a OR b == c)
---
Input: a = 4, b = 2, c = 7
Output: 1
---
Input: a = 1, b = 2, c = 3
Output: 0
